name: Build R Packages in Chunks

on:
  workflow_dispatch:
    inputs:
      date:
        description: "Override date (YYYY-MM-DD) to use that dated branch"
        required: false
        type: string
  push:
  schedule:
    - cron: '0 0 1 * *'

permissions:
  contents: read
  pull-requests: read

jobs:
  setup-chunks:
    runs-on: ubuntu-latest
    outputs:
      branch_date: ${{ steps.set_date.outputs.branch_date }}
      chunks: ${{ steps.split.outputs.chunks }}
    steps:
      - name: Verify PAT secret exists
        run: |
          if [ -z "${{ secrets.MY_PAT }}" ]; then
            echo "ERROR: secrets.MY_PAT is not defined."
            exit 1
          fi
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: rstats-on-nix
      - name: Determine branch_date
        id: set_date
        run: |
          if [ -n "${{ github.event.inputs.date }}" ]; then
            branch_date="${{ github.event.inputs.date }}"
          else
            branch_date=$(date '+%Y-%m-%d')
          fi
          echo "Using branch_date=$branch_date"
          echo "branch_date=$branch_date" >> $GITHUB_OUTPUT
      - name: Fetch rPackages attribute names
        run: |
          nix eval --json \
            github:rstats-on-nix/nixpkgs/${{ steps.set_date.outputs.branch_date }}#rPackages \
            --apply builtins.attrNames > rpackages.json
          jq -r '.[]' rpackages.json > rpackages.csv
          wc -l rpackages.csv
      - name: Limit to first 10 packages (testing)
        run: |
          head -n 10 rpackages.csv > rpackages.first10
          mv rpackages.first10 rpackages.csv
          wc -l rpackages.csv
      - name: Split packages into chunks of 2
        id: split
        run: |
          mkdir chunks
          split -l 2 -d -a 3 rpackages.csv chunks/chunk_
          chunks_json=$(printf '%s\n' chunks/chunk_* | jq -R -s -c 'split("\n")[:-1]')
          echo "chunks=$chunks_json" >> $GITHUB_OUTPUT
      - name: Upload chunk files
        uses: actions/upload-artifact@v4
        with:
          name: package-chunks
          path: chunks/

  build-chunk:
    needs: setup-chunks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        chunk_file: ${{ fromJson(needs.setup-chunks.outputs.chunks) }}
    outputs:
      system: ${{ steps.set_outputs.outputs.system }}
      failed_packages: ${{ steps.set_outputs.outputs.failed_packages }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: rstats-on-nix
      - name: Download chunk file
        uses: actions/download-artifact@v4
        with:
          name: package-chunks
          path: chunks
      - name: Derive chunk ID
        id: chunk_id
        run: |
          fname=$(basename "${{ matrix.chunk_file }}")
          echo "id=$fname" >> $GITHUB_OUTPUT
      - name: Build packages
        id: build
        continue-on-error: true
        run: |
          uname_s=$(uname -s)
          uname_m=$(uname -m)
          case "${uname_s}-${uname_m}" in
            Linux-x86_64)   system="x86_64-linux" ;;
            Darwin-arm64)   system="aarch64-darwin" ;;
            Darwin-x86_64)  system="x86_64-darwin" ;;
            *)              system="${uname_m}-unknown" ;;
          esac
          echo "system=$system" >> $GITHUB_OUTPUT

          branch_date="${{ needs.setup-chunks.outputs.branch_date }}"
          chunk_id="${{ steps.chunk_id.outputs.id }}"
          logfile="logs/build-${system}-${chunk_id}-${branch_date}.log"
          failfile="fail-${system}.txt"
          mkdir -p logs
          
          while read pkg; do
            echo "=== Building $pkg ($system $branch_date) ===" | tee -a "$logfile"
            if nix build -j auto --keep-going "github:rstats-on-nix/nixpkgs/${branch_date}#rPackages.$pkg" >>"$logfile" 2>&1; then
              echo "SUCCESS $pkg" >>"$logfile"
            else
              echo "FAIL $pkg" >>"$logfile"
              echo "$pkg" >> "$failfile"
            fi
          done < "${{ matrix.chunk_file }}"

          mkdir -p fail_out
          if [ -f "$failfile" ]; then
            sort -u "$failfile" > "fail_out/${system}.txt"
          fi
      
      - name: Set failure outputs
        id: set_outputs
        run: |
          system="${{ steps.build.outputs.system }}"
          fail_file="fail_out/${system}.txt"
          
          echo "system=${system}" >> $GITHUB_OUTPUT

          if [ -f "$fail_file" ]; then
            {
              echo 'failed_packages<<EOF'
              cat "$fail_file"
              echo EOF
            } >> $GITHUB_OUTPUT
          else
            echo "failed_packages=" >> $GITHUB_OUTPUT
          fi

  collect-results:
    needs:
      - setup-chunks
      - build-chunk
    runs-on: ubuntu-latest
    steps:
      - name: Aggregate failures from job outputs
        id: aggregate
        run: |
          mkdir -p failed
          
          RAW_JSON='${{ toJSON(needs.build-chunk.outputs) }}'

          # This logic handles both multi-job and single-job outputs from the matrix.
          # It checks if the JSON is a single flat object (the edge case) and wraps it
          # to look like a normal multi-job output.
          NORMALIZED_JSON=$(echo "$RAW_JSON" | jq 'if ((type == "object") and (.system | type == "string")) then { "single_job": . } else . end')

          # The rest of the script now receives a consistent structure.
          echo "$NORMALIZED_JSON" | jq -c '.[]' | \
          while read -r line; do
            system=$(echo "$line" | jq -r .system)
            packages=$(echo "$line" | jq -r .failed_packages)

            if [ -n "$packages" ]; then
              echo "Failures reported for system: $system"
              echo "$packages" >> "failed/${system}.txt"
            fi
          done

          shopt -s nullglob
          for f in failed/*.txt; do
            sort -u "$f" -o "$f"
          done
          
          echo "Aggregated failure files:"
          ls -1 failed || true
          echo "-----"
          for f in failed/*.txt; do
            echo "== $f =="; cat "$f"; echo
          done

      - name: Prepare PR body
        id: pr_body
        run: |
          shopt -s nullglob
          {
            echo "<details><summary>Failed packages</summary>"
            echo
            any=false
            for f in failed/*.txt; do
              [ -s "$f" ] && any=true
            done
            if ! $any; then
              echo "All packages built successfully on all platforms."
              echo
            else
              for sys in x86_64-linux aarch64-darwin x86_64-darwin unknown; do
                file="failed/${sys}.txt"
                if [ -s "$file" ]; then
                  echo "### \`${sys}\`"
                  echo '```'
                  cat "$file"
                  echo '```'
                  echo
                fi
              done
            fi
            echo "</details>"
          } > pr_body.txt
          cat pr_body.txt
          body_json=$(jq -Rs . < pr_body.txt)
          echo "body=$body_json" >> $GITHUB_OUTPUT

      - name: Checkout target repo master
        uses: actions/checkout@v4
        with:
          repository: rstats-on-nix/nixpkgs
          ref: master
          path: target-nixpkgs
          fetch-depth: 0
          token: ${{ secrets.MY_PAT }}
      - name: Import JSON files from dated branch
        working-directory: target-nixpkgs
        run: |
          date_branch="${{ needs.setup-chunks.outputs.branch_date }}"
          git fetch origin "$date_branch:$date_branch" --depth=1
          git checkout master
          git checkout "$date_branch" -- pkgs/development/r-modules/bioc-annotation-packages.json \
                                       pkgs/development/r-modules/bioc-experiment-packages.json \
                                       pkgs/development/r-modules/bioc-packages.json \
                                       pkgs/development/r-modules/cran-packages.json
          git diff --name-status pkgs/development/r-modules/*.json || true
      - name: Create PR with JSON updates
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.MY_PAT }}
          path: target-nixpkgs
          add-paths: |
            pkgs/development/r-modules/bioc-annotation-packages.json
            pkgs/development/r-modules/bioc-experiment-packages.json
            pkgs/development/r-modules/bioc-packages.json
            pkgs/development/r-modules/cran-packages.json
          base: master
          branch: update-r-modules-${{ needs.setup-chunks.outputs.branch_date }}
          title: "Update R module JSONs for ${{ needs.setup-chunks.outputs.branch_date }}"
          body: ${{ steps.pr_body.outputs.body }}
