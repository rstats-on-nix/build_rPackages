name: Build R Packages in Chunks

on:
  workflow_dispatch:
    inputs:
      date:
        description: "Override date (YYYY-MM-DD) to use that dated branch"
        required: false
        type: string
  push:
  schedule:
    - cron: '0 0 1 * *'

permissions:
  contents: read
  pull-requests: read

jobs:
  setup-chunks:
    runs-on: ubuntu-latest
    outputs:
      branch_date: ${{ steps.set_date.outputs.branch_date }}
      chunks: ${{ steps.split.outputs.chunks }}
    steps:
      - name: Verify PAT secret exists
        run: |
          if [ -z "${{ secrets.MY_PAT }}" ]; then
            echo "ERROR: secrets.MY_PAT is not defined."
            exit 1
          fi
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: rstats-on-nix
      - name: Determine branch_date
        id: set_date
        run: |
          if [ -n "${{ github.event.inputs.date }}" ]; then
            branch_date="${{ github.event.inputs.date }}"
          else
            branch_date=$(date '+%Y-%m-%d')
          fi
          echo "Using branch_date=$branch_date"
          echo "branch_date=$branch_date" >> $GITHUB_OUTPUT
      - name: Fetch rPackages attribute names
        run: |
          nix eval --json \
            github:rstats-on-nix/nixpkgs/${{ steps.set_date.outputs.branch_date }}#rPackages \
            --apply builtins.attrNames > rpackages.json
          jq -r '.[]' rpackages.json > rpackages.csv
          wc -l rpackages.csv
      - name: Split packages into chunks of 300
        id: split
        run: |
          mkdir chunks
          split -l 300 -d -a 3 rpackages.csv chunks/chunk_
          chunks_json=$(printf '%s\n' chunks/chunk_* | jq -R -s -c 'split("\n")[:-1]')
          echo "chunks=$chunks_json" >> $GITHUB_OUTPUT
      - name: Upload chunk files
        uses: actions/upload-artifact@v4
        with:
          name: package-chunks
          path: chunks/

  build-linux:
    needs: setup-chunks
    uses: ./.github/workflows/reusable-build-chunk.yml
    # `runs-on` is REMOVED from this job definition.
    strategy:
      fail-fast: false
      max-parallel: 15
      matrix:
        chunk_file: ${{ fromJson(needs.setup-chunks.outputs.chunks) }}
    with:
      # The runner OS is now passed as an input.
      runner_os: ubuntu-latest
      chunk_file: ${{ matrix.chunk_file }}
      branch_date: ${{ needs.setup-chunks.outputs.branch_date }}
    secrets:
      inherit

  build-macos:
    needs: setup-chunks
    uses: ./.github/workflows/reusable-build-chunk.yml
    # `runs-on` is REMOVED from this job definition.
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        chunk_file: ${{ fromJson(needs.setup-chunks.outputs.chunks) }}
    with:
      # The runner OS is now passed as an input.
      runner_os: macos-latest
      chunk_file: ${{ matrix.chunk_file }}
      branch_date: ${{ needs.setup-chunks.outputs.branch_date }}
    secrets:
      inherit

  collect-results:
    needs:
      - setup-chunks
      - build-linux
      - build-macos
    runs-on: ubuntu-latest
    if: always() && needs.setup-chunks.result == 'success'
    steps:
      - name: Aggregate failures from job outputs
        id: aggregate
        run: |
          mkdir -p failed
          
          RAW_JSON_LINUX='${{ toJSON(needs.build-linux.outputs) }}'
          RAW_JSON_MACOS='${{ toJSON(needs.build-macos.outputs) }}'

          process_outputs() {
            local json_input=$1
            local job_name=$2
            
            echo "$json_input" | jq -c 'to_entries | .[] | .value.outputs' | \
            while read -r line; do
              system=$(echo "$line" | jq -r .system)
              packages=$(echo "$line" | jq -r .failed_packages)

              if [ -n "$system" ] && [ -n "$packages" ]; then
                echo "Failures reported for system: $system from job: $job_name"
                echo "$packages" >> "failed/${system}.txt"
              fi
            done
          }
          
          process_outputs "$RAW_JSON_LINUX" "build-linux"
          process_outputs "$RAW_JSON_MACOS" "build-macos"

          shopt -s nullglob
          for f in failed/*.txt; do
            sort -u "$f" -o "$f"
          done
          
          echo "Aggregated failure files:"
          ls -1 failed || true
      - name: Prepare PR body
        id: pr_body
        run: |
          linux_status="${{ needs.build-linux.result }}"
          macos_status="${{ needs.build-macos.result }}"
          
          shopt -s nullglob
          {
            echo "<details><summary>Build Status</summary>"
            echo
            echo "**Linux build jobs result:** ${linux_status}"
            echo "**macOS build jobs result:** ${macos_status}"
            echo
            echo "Note: PR created regardless of individual chunk failures to ensure updates are applied."
            echo
            echo "</details>"
            echo
            echo "<details><summary>Failed packages</summary>"
            echo
            any=false
            for f in failed/*.txt; do
              [ -s "$f" ] && any=true
            done
            if ! $any; then
              echo "All packages built successfully on all platforms."
              echo
            else
              for sys in x86_64-linux aarch64-darwin x86_64-darwin unknown; do
                file="failed/${sys}.txt"
                if [ -s "$file" ]; then
                  echo "### \`${sys}\`"
                  echo '```'
                  cat "$file"
                  echo '```'
                  echo
                fi
              done
            fi
            echo "</details>"
          } > pr_body.txt
          cat pr_body.txt
          
          {
            echo 'body<<EOF'
            cat pr_body.txt
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Checkout target repo master
        uses: actions/checkout@v4
        with:
          repository: rstats-on-nix/nixpkgs
          ref: master
          path: target-nixpkgs
          fetch-depth: 0
          token: ${{ secrets.MY_PAT }}
      - name: Import JSON files from dated branch
        working-directory: target-nixpkgs
        run: |
          date_branch="${{ needs.setup-chunks.outputs.branch_date }}"
          git fetch origin "$date_branch:$date_branch" --depth=1
          git checkout master
          git checkout "$date_branch" -- pkgs/development/r-modules/bioc-annotation-packages.json \
                                       pkgs/development/r-modules/bioc-experiment-packages.json \
                                       pkgs/development/r-modules/bioc-packages.json \
                                       pkgs/development/r-modules/cran-packages.json
          git diff --name-status pkgs/development/r-modules/*.json || true
      - name: Create PR with JSON updates
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.MY_PAT }}
          path: target-nixpkgs
          add-paths: |
            pkgs/development/r-modules/bioc-annotation-packages.json
            pkgs/development/r-modules/bioc-experiment-packages.json
            pkgs/development/r-modules/bioc-packages.json
            pkgs/development/r-modules/cran-packages.json
          base: master
          branch: update-r-modules-${{ needs.setup-chunks.outputs.branch_date }}
          title: "Update R module JSONs for ${{ needs.setup-chunks.outputs.branch_date }}"
          body: ${{ steps.pr_body.outputs.body }}
