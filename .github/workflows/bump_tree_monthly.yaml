name: Build R Packages in Chunks

on:
  workflow_dispatch:
    inputs:
      date:
        description: "Override date (YYYY-MM-DD) to use that dated branch"
        required: false
        type: string
  push:
  schedule:
    - cron: '0 0 1 * *'

permissions:
  contents: read
  pull-requests: read

jobs:
  setup-chunks:
    runs-on: ubuntu-latest
    outputs:
      branch_date: ${{ steps.set_date.outputs.branch_date }}
      chunks: ${{ steps.split.outputs.chunks }}
    steps:
      - name: Verify PAT secret exists
        run: |
          if [ -z "${{ secrets.MY_PAT }}" ]; then
            echo "ERROR: secrets.MY_PAT is not defined."
            exit 1
          fi
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: rstats-on-nix
      - name: Determine branch_date
        id: set_date
        run: |
          if [ -n "${{ github.event.inputs.date }}" ]; then
            branch_date="${{ github.event.inputs.date }}"
          else
            branch_date=$(date '+%Y-%m-%d')
          fi
          echo "Using branch_date=$branch_date"
          echo "branch_date=$branch_date" >> $GITHUB_OUTPUT
      - name: Fetch rPackages attribute names
        run: |
          nix eval --json \
            github:rstats-on-nix/nixpkgs/${{ steps.set_date.outputs.branch_date }}#rPackages \
            --apply builtins.attrNames > rpackages.json
          jq -r '.[]' rpackages.json > rpackages.csv
          echo "Total package attrs:"
          wc -l rpackages.csv
      - name: Limit to first 10 packages (testing)
        run: |
          head -n 10 rpackages.csv > rpackages.first10
          mv rpackages.first10 rpackages.csv
          echo "Selected package count:"
          wc -l rpackages.csv
      - name: Split packages into chunks of 2
        id: split
        run: |
          mkdir chunks
          split -l 2 -d -a 3 rpackages.csv chunks/chunk_
          chunks_json=$(printf '%s\n' chunks/chunk_* | jq -R -s -c 'split("\n")[:-1]')
          echo "chunks=$chunks_json" >> $GITHUB_OUTPUT
          printf 'Created chunk files:\n'
          ls -1 chunks
      - name: Upload chunk files
        uses: actions/upload-artifact@v4
        with:
          name: package-chunks
          path: chunks/

  build-chunk:
    needs: setup-chunks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        chunk_file: ${{ fromJson(needs.setup-chunks.outputs.chunks) }}
    steps:
      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: rstats-on-nix
      - name: Download chunk file
        uses: actions/download-artifact@v4
        with:
          name: package-chunks
          path: chunks
      - name: Derive chunk ID
        id: chunk_id
        run: |
          fname=$(basename "${{ matrix.chunk_file }}")
            echo "id=$fname" >> $GITHUB_OUTPUT
          echo "Chunk ID: $fname (branch_date=${{ needs.setup-chunks.outputs.branch_date }})"
      - name: Build packages
        continue-on-error: true
        run: |
          uname_s=$(uname -s)
          uname_m=$(uname -m)
          case "${uname_s}-${uname_m}" in
            Linux-x86_64)   system="x86_64-linux" ;;
            Darwin-arm64)   system="aarch64-darwin" ;;
            Darwin-x86_64)  system="x86_64-darwin" ;;
            *)              system="${uname_m}-unknown" ;;
          esac
          # Normalize Intel mac to x86_64-darwin; we won't aggregate it separately but we keep name distinct.
          branch_date="${{ needs.setup-chunks.outputs.branch_date }}"
          chunk_id="${{ steps.chunk_id.outputs.id }}"
          logfile="logs/build-${system}-${chunk_id}-${branch_date}-${{ github.run_id }}.log"
          mkdir -p logs
          {
            echo "SYSTEM ${system}"
            echo "BRANCH_DATE ${branch_date}"
            echo "CHUNK ${chunk_id}"
            echo "START $(date -u +%FT%TZ)"
          } >>"$logfile"
          while read pkg; do
            echo "=== Building $pkg (date $branch_date system $system) ===" | tee -a "$logfile"
            if nix build -j auto --keep-going "github:rstats-on-nix/nixpkgs/${branch_date}#rPackages.$pkg" >>"$logfile" 2>&1; then
              echo "SUCCESS_PKG $pkg" >>"$logfile"
            else
              # New unambiguous failure marker:
              echo "FAIL_PKG $pkg" >>"$logfile"
            fi
          done < "${{ matrix.chunk_file }}"
          echo "FINISH $(date -u +%FT%TZ)" >>"$logfile"
      - name: Upload build log
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.os }}-${{ steps.chunk_id.outputs.id }}
          path: logs/

  collect-results:
    needs:
      - setup-chunks
      - build-chunk
    runs-on: ubuntu-latest
    steps:
      - name: Confirm branch_date
        run: echo "branch_date=${{ needs.setup-chunks.outputs.branch_date }}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Aggregate failed packages (per system)
        id: aggregate
        run: |
          mkdir -p failed
          shopt -s nullglob
          for f in artifacts/**/build-*.log; do
            # Primary attempt: read the SYSTEM header
            system=$(grep -m1 '^SYSTEM ' "$f" | awk '{print $2}')
            if [ -z "$system" ]; then
              # Fallback to path heuristics
              case "$f" in
                *logs-ubuntu-latest-*) system="x86_64-linux" ;;
                *logs-macos-latest-*)  system="aarch64-darwin" ;;
                *build-linux-*)        system="x86_64-linux" ;;
                *build-darwin-*)       system="aarch64-darwin" ;;
                *)                     system="unknown" ;;
              esac
            fi
            # Normalize possible x86_64-darwin to x86_64-darwin (leave as-is) â€“ only aggregate canonical ones + unknown
            grep '^FAIL_PKG ' "$f" | cut -d' ' -f2 >> "failed/${system}.txt" || true
          done
          # Deduplicate lines
          for sysfile in failed/*.txt 2>/dev/null; do
            sort -u "$sysfile" -o "$sysfile"
          done
          echo "Failure files produced:"
          ls -1 failed || true
          echo "Preview contents:"
          for sysfile in failed/*.txt 2>/dev/null; do
            echo "== $(basename "$sysfile") =="
            cat "$sysfile"
          done

      - name: Prepare PR body
        id: pr_body
        run: |
          section () {
            sys="$1"; pretty="$2"
            file="failed/${sys}.txt"
            if [ -s "$file" ]; then
              count=$(wc -l < "$file")
              echo "### ${pretty} (${count})"
              # Bullet list
              sed 's/^/* /' "$file"
              echo
            fi
          }
          {
            echo "<details><summary>Failed packages</summary>"
            echo
            have_fail=false
            for f in failed/*.txt 2>/dev/null; do
              [ -s "$f" ] && have_fail=true
            done
            if [ "$have_fail" = false ]; then
              echo "All packages built successfully on all platforms."
              echo
            else
              # Canonical sections
              section x86_64-linux "x86_64-linux"
              section aarch64-darwin "aarch64-darwin"
              # Anything unexpected
              for f in failed/*.txt 2>/dev/null; do
                sys=$(basename "$f" .txt)
                if [ "$sys" != "x86_64-linux" ] && [ "$sys" != "aarch64-darwin" ]; then
                  section "$sys" "$sys"
                fi
              done
            fi
            echo "</details>"
          } > pr_body.txt
          echo "PR body preview:"
          cat pr_body.txt
          body_json=$(jq -Rs . < pr_body.txt)
          echo "body=$body_json" >> $GITHUB_OUTPUT

      - name: Checkout target repo master
        uses: actions/checkout@v4
        with:
          repository: rstats-on-nix/nixpkgs
          ref: master
          path: target-nixpkgs
          fetch-depth: 0
          token: ${{ secrets.MY_PAT }}

      - name: Import JSON files from dated branch
        working-directory: target-nixpkgs
        run: |
          date_branch="${{ needs.setup-chunks.outputs.branch_date }}"
          git fetch origin "$date_branch:$date_branch" --depth=1
          git checkout master
          git checkout "$date_branch" -- pkgs/development/r-modules/bioc-annotation-packages.json \
                                       pkgs/development/r-modules/bioc-experiment-packages.json \
                                       pkgs/development/r-modules/bioc-packages.json \
                                       pkgs/development/r-modules/cran-packages.json
          git diff --name-status pkgs/development/r-modules/*.json || true

      - name: Create PR with JSON updates
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.MY_PAT }}
          path: target-nixpkgs
          add-paths: |
            pkgs/development/r-modules/bioc-annotation-packages.json
            pkgs/development/r-modules/bioc-experiment-packages.json
            pkgs/development/r-modules/bioc-packages.json
            pkgs/development/r-modules/cran-packages.json
          base: master
          branch: update-r-modules-${{ needs.setup-chunks.outputs.branch_date }}
          title: "Update R module JSONs for ${{ needs.setup-chunks.outputs.branch_date }}"
          body: ${{ steps.pr_body.outputs.body }}
